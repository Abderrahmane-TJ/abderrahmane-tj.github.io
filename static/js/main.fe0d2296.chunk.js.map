{"version":3,"sources":["scripts/components/Node/index.tsx","scripts/components/App/index.tsx","serviceWorker.js","index.tsx"],"names":["MAX_LEAVES_PER_NODE","Node","level","id","maxChildren","isRight","isLeft","useContext","LevelsContext","levelReached","updateLevelReached","useState","childNodes","setChildNodes","reachedSproutingLimit","hasMaxChildren","length","isFull","isEvenLevel","useEffect","speed","Math","random","timeTillNextUpdate","timeout","setTimeout","hasSibling","existingSibling","existingPosition","props","newPosition","round","newId","newLevel","newChildren","key","clearTimeout","className","cx","style","createContext","d2r","degree","PI","debugElement","baseElement","basePosition","window","addEventListener","getBoundingClientRect","d","sin","handleMouseMove","_throttle","e","MX","pageX","MY","pageY","MH","top","HC","left","base","MC","sqrt","TCL_RAW","asin","position","value","min","max","TCL","leftAngle","rightAngle","rightScale","leftScale","computedStyle","setAttribute","innerHTML","Boolean","location","hostname","match","ReactDOM","render","setLevel","document","getElementById","useCallback","nextLevel","theme","useMemo","themes","map","name","Provider","classNames","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe0d2296.chunk.js","sourcesContent":["import React, {\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n  CSSProperties,\n} from \"react\"\nimport cx from \"classnames\"\n\nimport { LevelsContext } from \"../App\"\nimport \"./Node.css\"\n\nexport const MAX_LEAVES_PER_NODE = 2\nconst SPROUT_SPEED_LIMIT = 50\nconst MAX_SPROUT_LEVELS = 9\nconst SPROUTING_CHANCE = 65 / 100\n\nexport const Node = ({\n  level,\n  id,\n  maxChildren,\n  isRight = false,\n  isLeft = false,\n}: {\n  level: number\n  id: string\n  maxChildren: number\n  isRight?: boolean\n  isLeft?: boolean\n}) => {\n  const { levelReached, updateLevelReached } = useContext(LevelsContext)\n  const [childNodes, setChildNodes] = useState<ReactNode[]>([])\n  const reachedSproutingLimit = level >= MAX_SPROUT_LEVELS\n\n  const hasMaxChildren = childNodes.length >= maxChildren\n  const isFull = hasMaxChildren && maxChildren === MAX_LEAVES_PER_NODE\n  const isEvenLevel = level % 2 === 0\n\n  useEffect(() => {\n    updateLevelReached(level)\n  }, [level, updateLevelReached])\n\n  useEffect(() => {\n    if (hasMaxChildren) {\n      return\n    }\n\n    const speed = Math.random() * SPROUT_SPEED_LIMIT\n    const timeTillNextUpdate =\n      speed + speed * Math.random() * levelReached * level\n\n    const timeout = setTimeout(() => {\n      const maxChildren = reachedSproutingLimit\n        ? 0\n        : Math.random() > SPROUTING_CHANCE\n        ? 1\n        : MAX_LEAVES_PER_NODE\n      const hasSibling = childNodes.length > 0\n      const existingSibling = hasSibling ? (childNodes[0] as any) : null\n      const existingPosition = hasSibling\n        ? existingSibling.props.isRight\n          ? 0\n          : 1\n        : null\n      const newPosition = hasSibling\n        ? existingPosition === 1\n          ? 0\n          : 1\n        : Math.round(Math.random())\n\n      const newId = `${id}-${newPosition + 1}`\n      const newLevel = level + 1\n      const newChildren = [\n        ...childNodes,\n        <Node\n          key={newId}\n          id={newId}\n          level={newLevel}\n          maxChildren={maxChildren}\n          isRight={newPosition === 0}\n          isLeft={newPosition === 1}\n        />,\n      ]\n      setChildNodes(newChildren)\n    }, timeTillNextUpdate)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [\n    childNodes,\n    id,\n    hasMaxChildren,\n    level,\n    levelReached,\n    reachedSproutingLimit,\n  ])\n\n  return (\n    <div\n      className={cx(\"Node\", {\n        \"Node--even-level\": isEvenLevel,\n        \"Node--full\": isFull,\n        \"Node--right\": isRight,\n        \"Node--left\": isLeft,\n      })}\n      id={id}\n      style={{} as CSSProperties}\n    >\n      <div className=\"Node--inner\">{childNodes}</div>\n    </div>\n  )\n}\n","import React, {\n  createContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\nimport classNames from \"classnames\"\nimport _throttle from \"lodash/throttle\"\n\nimport { MAX_LEAVES_PER_NODE, Node } from \"../Node\"\nimport \"./App.css\"\n\ntype LevelsContextType = {\n  levelReached: number\n  updateLevelReached: (nextLevel: number) => void\n}\nexport const LevelsContext = createContext<LevelsContextType>({\n  levelReached: 0,\n  updateLevelReached: () => {},\n})\n\nconst d2r = (degree: number) => (degree * Math.PI) / 180\nconst r2d = (radian: number) => (radian / Math.PI) * 180\n\nconst clamp = (value: number, min: number, max: number) => {\n  return value >= max ? max : value <= min ? min : value\n}\n\n// const pageWidth = document.body.clientWidth\n// const pageHeight = document.body.clientHeight\n\nlet debugElement: HTMLElement | null = null\nlet baseElement: HTMLElement | null = null\nlet basePosition: ClientRect | DOMRect = {} as ClientRect | DOMRect\n\nwindow.addEventListener(\n  \"resize\",\n  () => {\n    if (baseElement) {\n      basePosition = baseElement.getBoundingClientRect()\n    }\n  },\n  false\n)\n\nconst base = 75\nconst d = base / Math.sin(Math.PI / 2)\n\nconst handleMouseMove = _throttle((e: MouseEvent) => {\n  const MX = e.pageX\n  const MY = e.pageY\n  const topAngle = 90\n  const MH = MY - basePosition.top\n  const HC = MX - (basePosition.left + base / 2)\n  const MC = Math.sqrt(MH * MH + HC * HC)\n  const TCL_RAW = r2d(Math.asin(MH / MC))\n  let position: \"top-left\" | \"bottom-left\" | \"top-right\" | \"bottom-right\" | \"\" =\n    \"\"\n\n  if (MH < 0 && HC < 0) {\n    position = \"top-left\"\n  }\n  if (MH >= 0 && HC < 0) {\n    position = \"bottom-left\"\n  }\n  if (MH < 0 && HC >= 0) {\n    position = \"top-right\"\n  }\n  if (MH >= 0 && HC >= 0) {\n    position = \"bottom-right\"\n  }\n  let TCL = TCL_RAW\n  switch (position) {\n    case \"top-left\":\n      TCL = -TCL_RAW\n      break\n    case \"top-right\":\n      TCL = TCL_RAW + 180\n      break\n    case \"bottom-right\":\n      TCL = 180 - TCL\n      break\n  }\n\n  TCL = clamp(TCL, 30, 150)\n\n  const leftAngle = (180 - TCL) / 2\n  const rightAngle = TCL / 2\n\n  const rightScale = (d * Math.sin(d2r(leftAngle))) / base\n  const leftScale = (d * Math.sin(d2r(rightAngle))) / base\n\n  const computedStyle = `\n--base: ${base}px;\n--right-scale: ${rightScale};\n--left-scale: ${leftScale};\n--top-angle: ${topAngle}deg;\n--right-angle: ${rightAngle}deg;\n--left-angle: ${leftAngle}deg;`\n\n  baseElement!.setAttribute(\"style\", computedStyle)\n\n  if (debugElement) {\n    debugElement!.innerHTML = `\nM.x = ${MX};\nM.y = ${MY};\nMH = ${MH}\nHC = ${HC}\nposition = ${position}\nMC = ${MC}\nTCL = ${TCL}\nrightAngle = ${rightAngle}\nleftAngle = ${leftAngle}\ntopAngle = ${topAngle}\n`\n  }\n}, 60)\n\nexport function App() {\n  const [levelReached, setLevel] = useState(0)\n\n  useEffect(() => {\n    debugElement = document.getElementById(\"debug\")\n    baseElement = document.getElementById(\"base\")\n    basePosition = baseElement!.getBoundingClientRect()\n  }, [])\n\n  const updateLevelReached = useCallback(\n    (nextLevel: number) => {\n      if (nextLevel > levelReached) {\n        setLevel(nextLevel)\n      }\n    },\n    [levelReached]\n  )\n\n  const theme: string = useMemo(() => {\n    const themes = [\"green\", \"red\", \"purple\"]\n    return themes.map(name => `${name}-theme`)[\n      ((Math.random() * 100) | 0) % themes.length\n    ]\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleMouseMove, false)\n  }, [])\n\n  return (\n    <LevelsContext.Provider value={{ levelReached, updateLevelReached }}>\n      <div className={classNames(\"App\", theme)}>\n        <div id=\"base\" className=\"base\">\n          <Node level={1} id=\"1\" maxChildren={MAX_LEAVES_PER_NODE} />\n        </div>\n      </div>\n    </LevelsContext.Provider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport \"normalize.css\"\n\nimport \"./styles/index.css\"\nimport { App } from \"./scripts/components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nconst DEBUG = false\n\nReactDOM.render(\n  <>\n    {DEBUG && <pre className=\"debug\" id=\"debug\" />}\n    <App />\n  </>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}