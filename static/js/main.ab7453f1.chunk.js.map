{"version":3,"sources":["scripts/components/Node/index.js","scripts/components/App/index.js","serviceWorker.js","index.js"],"names":["Node","_ref3","level","base","id","maxChildren","react_default","a","createElement","className","_useContext","useContext","LevelsContext","reachedLevel","updateReachedLevel","_useState","useState","_useState2","Object","slicedToArray","childNodes","updateChildNodes","_useState3","_useState4","full","_ref","setFull","useEffect","length","speed","Math","random","timeTillNextUpdate","timeout","setTimeout","newId","uuid","newChildren","concat","toConsumableArray","Node_Node","key","clearTimeout","useChildNodesBuilder","_ref2","useReachedLevelUpdater","cx","Node--even-level","Node--full","createContext","Boolean","window","location","hostname","match","ReactDOM","render","setLevel","Provider","value","nextLevel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QA4DO,SAASA,EAATC,GAAgD,IAAhCC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,KAAMC,EAAmBH,EAAnBG,GAAIC,EAAeJ,EAAfI,YACtC,GAAIH,EAAQ,EAAG,OAAOI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SADgB,IAAAC,EAGRC,qBAAWC,GAAhDC,EAH6CH,EAG7CG,aAAcC,EAH+BJ,EAG/BI,mBAH+BC,EAIdC,mBAAS,IAJKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAI9CK,EAJ8CH,EAAA,GAIlCI,EAJkCJ,EAAA,GAAAK,EAK7BN,oBAAS,GALoBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAK9CE,EAL8CD,EAAA,GAmBrD,OAxEF,SAAAE,GASGA,EARDrB,GAQC,IAPDgB,EAOCK,EAPDL,WACAf,EAMCoB,EANDpB,YACAH,EAKCuB,EALDvB,MACAmB,EAICI,EAJDJ,iBACAR,EAGCY,EAHDZ,aACAW,EAECC,EAFDD,KACAE,EACCD,EADDC,QAEAC,oBACE,WACE,KAAIP,EAAWQ,QAAUvB,GAAzB,CAMA,IAAMwB,EAAwB,IAAhBC,KAAKC,SACbC,EACJH,EAAQA,EAAQC,KAAKC,SAAWlB,EAAeX,EAE3C+B,EAAUC,WAAW,WACzB,IAAMC,EAAQC,MACRC,EAAW,GAAAC,OAAApB,OAAAqB,EAAA,EAAArB,CACZE,GADY,CAEfd,EAAAC,EAAAC,cAACgC,EAAD,CACEC,IAAKN,EACL/B,GAAI+B,EACJjC,MAAOA,EAAQ,EACfG,YAAayB,KAAKC,SAAW,GAAM,EAAI,MAG3CV,EAAiBgB,IAChBL,GAEH,OAAO,WACLU,aAAaT,IAxBa,IAAtBb,EAAWQ,QAAiBJ,GAC9BE,GAAQ,IA0Bd,CAACN,EAAWQ,SAoBde,CAAqB,CACnBvC,KACAgB,aACAf,cACAH,QACAmB,mBACAR,eACAW,OACAE,QAfmDH,EAAA,KATvD,SAAAqB,GAA+D,IAA7B9B,EAA6B8B,EAA7B9B,mBAAoBZ,EAAS0C,EAAT1C,MACpDyB,oBACE,WACEb,EAAmBZ,IAErB,EAAC,IAqBH2C,CAAuB,CAAE/B,qBAAoBZ,UAG3CI,EAAAC,EAAAC,cAAA,OACEC,UAAWqC,IAAG,OAAQ,CACpB3C,OACA4C,mBAAoB7C,EAAQ,IAAM,EAClC8C,aAAcxB,KAEfJ,GClFA,IAAMR,EAAgBqC,wBAAc,CAAEpC,aAAc,ICQvCqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOlD,EAAAC,EAAAC,cFHT,WAAe,IAAAO,EACaC,mBAAS,GADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACbF,EADaI,EAAA,GACCwC,EADDxC,EAAA,GAQpB,OACEX,EAAAC,EAAAC,cAACI,EAAc8C,SAAf,CAAwBC,MAAO,CAAE9C,eAAcC,mBAPjD,SAA4B8C,GACtBA,EAAY/C,GACd4C,EAASG,MAMTtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,CAAMtC,MAAO,EAAGC,MAAI,EAACC,GAAG,UAAUC,YAAa,OERvC,MAASwD,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ab7453f1.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\"\nimport cx from \"classnames\"\nimport uuid from \"uuid\"\n\nimport { LevelsContext } from \"../App\"\nimport \"./Node.css\"\n\nfunction useChildNodesBuilder({\n  id,\n  childNodes,\n  maxChildren,\n  level,\n  updateChildNodes,\n  reachedLevel,\n  full,\n  setFull\n}) {\n  useEffect(\n    () => {\n      if (childNodes.length >= maxChildren) {\n        if (childNodes.length === 2 && !full) {\n          setFull(true)\n        }\n        return\n      }\n      const speed = Math.random() * 1000\n      const timeTillNextUpdate =\n        speed + speed * Math.random() * reachedLevel * level\n\n      const timeout = setTimeout(() => {\n        const newId = uuid()\n        const newChildren = [\n          ...childNodes,\n          <Node\n            key={newId}\n            id={newId}\n            level={level + 1}\n            maxChildren={Math.random() > 0.8 ? 1 : 2}\n          />\n        ]\n        updateChildNodes(newChildren)\n      }, timeTillNextUpdate)\n\n      return () => {\n        clearTimeout(timeout)\n      }\n    },\n    [childNodes.length]\n  )\n}\n\nfunction useReachedLevelUpdater({ updateReachedLevel, level }) {\n  useEffect(\n    () => {\n      updateReachedLevel(level)\n    },\n    [true]\n  )\n}\n\nexport function Node({ level, base, id, maxChildren }) {\n  if (level > 5) return <div className=\"Node\" />\n\n  const { reachedLevel, updateReachedLevel } = useContext(LevelsContext)\n  const [childNodes, updateChildNodes] = useState([])\n  const [full, setFull] = useState(false)\n\n  useChildNodesBuilder({\n    id,\n    childNodes,\n    maxChildren,\n    level,\n    updateChildNodes,\n    reachedLevel,\n    full,\n    setFull\n  })\n  useReachedLevelUpdater({ updateReachedLevel, level })\n\n  return (\n    <div\n      className={cx(\"Node\", {\n        base,\n        \"Node--even-level\": level % 2 === 0,\n        \"Node--full\": full\n      })}>\n      {childNodes}\n    </div>\n  )\n}\n","import React, { createContext, useState } from \"react\"\nimport \"./App.css\"\nimport { Node } from \"../Node\"\n\nexport const LevelsContext = createContext({ reachedLevel: 0 })\n\nexport function App() {\n  const [reachedLevel, setLevel] = useState(0)\n  function updateReachedLevel(nextLevel) {\n    if (nextLevel > reachedLevel) {\n      setLevel(nextLevel)\n    }\n  }\n\n  return (\n    <LevelsContext.Provider value={{ reachedLevel, updateReachedLevel }}>\n      <div className=\"App\">\n        <Node level={0} base id=\"1-0-2-3\" maxChildren={2} />\n      </div>\n    </LevelsContext.Provider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"normalize.css\";\n\nimport \"./styles/index.css\";\nimport { App } from \"./scripts/components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}