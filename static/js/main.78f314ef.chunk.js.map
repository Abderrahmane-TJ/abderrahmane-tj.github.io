{"version":3,"sources":["scripts/components/Node/index.tsx","scripts/components/App/index.tsx","serviceWorker.js","index.tsx"],"names":["MAX_LEAVES_PER_NODE","Node","level","id","maxChildren","useContext","LevelsContext","levelReached","updateLevelReached","useState","childNodes","setChildNodes","reachedSproutingLimit","hasMaxChildren","length","isFull","isEvenLevel","useEffect","Math","random","speed","timeTillNextUpdate","timeout","setTimeout","newId","newChildren","key","clearTimeout","className","cx","createContext","Boolean","window","location","hostname","match","ReactDOM","render","setLevel","useCallback","nextLevel","theme","useMemo","themes","map","name","Provider","value","classNames","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAMaA,G,MAAsB,GAEtBC,EAAO,SAAPA,EAAQ,GAQd,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,GACAC,EAKI,EALJA,YAKI,EACyCC,qBAAWC,GAAhDC,EADJ,EACIA,aAAcC,EADlB,EACkBA,mBADlB,EAEgCC,mBAAsB,IAFtD,mBAEGC,EAFH,KAEeC,EAFf,KAGEC,EAAwBV,EAAQ,EAEhCW,EAAiBH,EAAWI,QAAUV,EACtCW,EAASF,GAAkBT,IAAgBJ,EAC3CgB,EAAcd,EAAQ,IAAM,EA8ClC,OA5CAe,oBAAU,WACRT,EAAmBN,IAClB,CAACA,EAAOM,IAEXS,oBAAU,WACR,IAAIJ,EAAJ,CAIA,IAAMT,EAAcQ,EAChB,EACAM,KAAKC,SAAW,GAChB,EACAnB,EACEoB,EAAwB,IAAhBF,KAAKC,SACbE,EACJD,EAAQA,EAAQF,KAAKC,SAAWZ,EAAeL,EAE3CoB,EAAUC,WAAW,WACzB,IAAMC,EAAK,UAAMrB,EAAN,YAAYO,EAAWI,QAC5BW,EAAW,sBACZf,GADY,CAEf,kBAACT,EAAD,CACEyB,IAAKF,EACLrB,GAAIqB,EACJtB,MAAOA,EAAQ,EACfE,YAAaA,MAGjBO,EAAcc,IACbJ,GAEH,OAAO,WACLM,aAAaL,MAEd,CACDZ,EACAP,EACAU,EACAX,EACAK,EACAK,IAIA,yBACEgB,UAAWC,IAAG,OAAQ,CACpB,mBAAoBb,EACpB,aAAcD,IAEhBZ,GAAIA,GAEHO,ICpEMJ,G,MAAgBwB,wBAAiC,CAC5DvB,aAAc,EACdC,mBAAoB,gBCCFuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBFKT,WAAgB,IAAD,EACa5B,mBAAS,GADtB,mBACbF,EADa,KACC+B,EADD,KAEd9B,EAAqB+B,sBACzB,SAACC,GACKA,EAAYjC,GACd+B,EAASE,IAGb,CAACjC,IAGGkC,EAAgBC,kBAAQ,WAC5B,IAAMC,EAAS,CAAC,QAAS,MAAO,UAChC,OAAOA,EAAOC,IAAI,SAAAC,GAAI,gBAAOA,EAAP,aACF,IAAhB3B,KAAKC,SAAkB,GAAKwB,EAAO7B,SAEtC,IAEH,OACE,kBAACR,EAAcwC,SAAf,CAAwBC,MAAO,CAAExC,eAAcC,uBAC7C,yBAAKoB,UAAWoB,IAAW,MAAOP,IAChC,yBAAKb,UAAU,QACb,kBAAC,EAAD,CAAM1B,MAAO,EAAGC,GAAG,IAAIC,YAAaJ,QE3B9B,MAASiD,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.78f314ef.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect, ReactNode } from \"react\"\nimport cx from \"classnames\"\n\nimport { LevelsContext } from \"../App\"\nimport \"./Node.css\"\n\nexport const MAX_LEAVES_PER_NODE = 2\n\nexport const Node = ({\n  level,\n  id,\n  maxChildren,\n}: {\n  level: number\n  id: string\n  maxChildren: number\n}) => {\n  const { levelReached, updateLevelReached } = useContext(LevelsContext)\n  const [childNodes, setChildNodes] = useState<ReactNode[]>([])\n  const reachedSproutingLimit = level > 5\n\n  const hasMaxChildren = childNodes.length >= maxChildren\n  const isFull = hasMaxChildren && maxChildren === MAX_LEAVES_PER_NODE\n  const isEvenLevel = level % 2 === 0\n\n  useEffect(() => {\n    updateLevelReached(level)\n  }, [level, updateLevelReached])\n\n  useEffect(() => {\n    if (hasMaxChildren) {\n      return\n    }\n\n    const maxChildren = reachedSproutingLimit\n      ? 0\n      : Math.random() > 0.6\n      ? 1\n      : MAX_LEAVES_PER_NODE\n    const speed = Math.random() * 500\n    const timeTillNextUpdate =\n      speed + speed * Math.random() * levelReached * level\n\n    const timeout = setTimeout(() => {\n      const newId = `${id}-${childNodes.length}`\n      const newChildren = [\n        ...childNodes,\n        <Node\n          key={newId}\n          id={newId}\n          level={level + 1}\n          maxChildren={maxChildren}\n        />,\n      ]\n      setChildNodes(newChildren)\n    }, timeTillNextUpdate)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [\n    childNodes,\n    id,\n    hasMaxChildren,\n    level,\n    levelReached,\n    reachedSproutingLimit,\n  ])\n\n  return (\n    <div\n      className={cx(\"Node\", {\n        \"Node--even-level\": isEvenLevel,\n        \"Node--full\": isFull,\n      })}\n      id={id}\n    >\n      {childNodes}\n    </div>\n  )\n}\n","import React, { createContext, useCallback, useMemo, useState } from \"react\"\nimport classNames from \"classnames\"\nimport { MAX_LEAVES_PER_NODE, Node } from \"../Node\"\nimport \"./App.css\"\n\ntype LevelsContextType = {\n  levelReached: number\n  updateLevelReached: (nextLevel: number) => void\n}\nexport const LevelsContext = createContext<LevelsContextType>({\n  levelReached: 0,\n  updateLevelReached: () => {},\n})\n\nexport function App() {\n  const [levelReached, setLevel] = useState(0)\n  const updateLevelReached = useCallback(\n    (nextLevel: number) => {\n      if (nextLevel > levelReached) {\n        setLevel(nextLevel)\n      }\n    },\n    [levelReached]\n  )\n\n  const theme: string = useMemo(() => {\n    const themes = [\"green\", \"red\", \"purple\"]\n    return themes.map(name => `${name}-theme`)[\n      ((Math.random() * 100) | 0) % themes.length\n    ]\n  }, [])\n\n  return (\n    <LevelsContext.Provider value={{ levelReached, updateLevelReached }}>\n      <div className={classNames(\"App\", theme)}>\n        <div className=\"base\">\n          <Node level={0} id=\"0\" maxChildren={MAX_LEAVES_PER_NODE} />\n        </div>\n      </div>\n    </LevelsContext.Provider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"normalize.css\";\n\nimport \"./styles/index.css\";\nimport { App } from \"./scripts/components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}